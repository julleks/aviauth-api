"""0014 Refactor models

Revision ID: 55e271aa67b2
Revises: 3a89b996ecbe
Create Date: 2022-01-01 22:32:52.724910

"""
import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "55e271aa67b2"
down_revision = "3a89b996ecbe"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "accesstoken",
        sa.Column("revoked_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "accesstoken", sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False)
    )
    op.add_column(
        "accesstoken",
        sa.Column("client_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.drop_index("ix_accesstoken_application_id", table_name="accesstoken")
    op.create_index(
        op.f("ix_accesstoken_client_id"), "accesstoken", ["client_id"], unique=False
    )
    op.create_index(op.f("ix_accesstoken_id"), "accesstoken", ["id"], unique=True)
    op.drop_constraint(
        "accesstoken_application_id_fkey", "accesstoken", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "accesstoken", "application", ["client_id"], ["client_id"]
    )
    op.drop_column("accesstoken", "deactivated_at")
    op.drop_column("accesstoken", "application_id")
    op.add_column(
        "application",
        sa.Column("deactivated_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "application", sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False)
    )
    op.create_index(op.f("ix_application_id"), "application", ["id"], unique=True)
    op.drop_column("application", "updated_at")
    op.add_column(
        "refreshtoken", sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False)
    )
    op.add_column(
        "refreshtoken",
        sa.Column("client_id", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )
    op.drop_index("ix_refreshtoken_application_id", table_name="refreshtoken")
    op.drop_index("ix_refreshtoken_related_access_token", table_name="refreshtoken")
    op.create_index(
        op.f("ix_refreshtoken_client_id"), "refreshtoken", ["client_id"], unique=False
    )
    op.create_index(op.f("ix_refreshtoken_id"), "refreshtoken", ["id"], unique=True)
    op.drop_constraint(
        "refreshtoken_application_id_fkey", "refreshtoken", type_="foreignkey"
    )
    op.drop_constraint(
        "refreshtoken_related_access_token_fkey", "refreshtoken", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "refreshtoken", "application", ["client_id"], ["client_id"]
    )
    op.drop_column("refreshtoken", "application_id")
    op.drop_column("refreshtoken", "updated_at")
    op.drop_column("refreshtoken", "related_access_token")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "refreshtoken",
        sa.Column(
            "related_access_token", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "refreshtoken",
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "refreshtoken",
        sa.Column("application_id", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.drop_constraint(None, "refreshtoken", type_="foreignkey")
    op.create_foreign_key(
        "refreshtoken_related_access_token_fkey",
        "refreshtoken",
        "accesstoken",
        ["related_access_token"],
        ["access_token"],
    )
    op.create_foreign_key(
        "refreshtoken_application_id_fkey",
        "refreshtoken",
        "application",
        ["application_id"],
        ["client_id"],
    )
    op.drop_index(op.f("ix_refreshtoken_id"), table_name="refreshtoken")
    op.drop_index(op.f("ix_refreshtoken_client_id"), table_name="refreshtoken")
    op.create_index(
        "ix_refreshtoken_related_access_token",
        "refreshtoken",
        ["related_access_token"],
        unique=False,
    )
    op.create_index(
        "ix_refreshtoken_application_id",
        "refreshtoken",
        ["application_id"],
        unique=False,
    )
    op.drop_column("refreshtoken", "client_id")
    op.drop_column("refreshtoken", "id")
    op.add_column(
        "application",
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
    )
    op.drop_index(op.f("ix_application_id"), table_name="application")
    op.drop_column("application", "id")
    op.drop_column("application", "deactivated_at")
    op.add_column(
        "accesstoken",
        sa.Column("application_id", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "accesstoken",
        sa.Column(
            "deactivated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "accesstoken", type_="foreignkey")
    op.create_foreign_key(
        "accesstoken_application_id_fkey",
        "accesstoken",
        "application",
        ["application_id"],
        ["client_id"],
    )
    op.drop_index(op.f("ix_accesstoken_id"), table_name="accesstoken")
    op.drop_index(op.f("ix_accesstoken_client_id"), table_name="accesstoken")
    op.create_index(
        "ix_accesstoken_application_id", "accesstoken", ["application_id"], unique=False
    )
    op.drop_column("accesstoken", "client_id")
    op.drop_column("accesstoken", "id")
    op.drop_column("accesstoken", "revoked_at")
    # ### end Alembic commands ###
